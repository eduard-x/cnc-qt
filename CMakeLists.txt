PROJECT(cnc-qt)

# Configure CMake ...
CMAKE_MINIMUM_REQUIRED(VERSION 2.8 FATAL_ERROR)
# CMAKE_POLICY(SET CMP0003 OLD)
# CMAKE_POLICY(SET CMP0015 OLD)

# set the Qt version to 4 or 5
OPTION (USE_QT5 "Using of Qt5 version for compiling" ON)

IF(${USE_QT5})
    SET(USE_QT_VERSION 5)
ELSE(${USE_QT5})
    SET(USE_QT_VERSION 4)
ENDIF(${USE_QT5})


#debug or release
OPTION (USE_DEBUGGER "Include in binary file debug information" OFF)

#enable or disable profiling info
OPTION (USE_PROFILER "Include in binary file profiling information" OFF)

#addr sanitizer checking 
OPTION (ADDR_SANITIZER "Include in binary file address sanitizer information" OFF)

IF(${ADDR_SANITIZER})
    #for detailed information
    SET (USE_DEBUGGER ON)
ENDIF()

IF(${USE_PROFILER})
    #for detailed information
    SET (USE_DEBUGGER ON)
ENDIF()


MESSAGE(STATUS "System: ${CMAKE_SYSTEM_NAME}")
MESSAGE(STATUS "Compiler: ${CMAKE_CXX_COMPILER_ID}")

IF(WIN32)
    IF(MSVC)
        SET (CMAKE_PREFIX_PATH "${CMAKE_PREFIX_PATH}:${QTDIR}\\msvc2015\\")
    ENDIF()

    IF(MinGW)
        SET (CMAKE_PREFIX_PATH "${CMAKE_PREFIX_PATH}:${QTDIR}\\mingw53_32\\")
    ENDIF()
ENDIF()


FIND_PROGRAM(CCACHE_FOUND ccache)
IF(CCACHE_FOUND)
    SET_PROPERTY(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
    SET_PROPERTY(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
ENDIF()

# # SET(FILES_TO_TRANSLATE)

#disable -rdynamic
# SET(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS "")
# SET(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS "")


#
# Need Flex
#
FIND_PACKAGE(FLEX 2.5.9  REQUIRED)
IF(FLEX_FOUND)
  MESSAGE(STATUS "Found flex: ${FLEX_EXECUTABLE} / Version: ${FLEX_VERSION}" )
ENDIF()

#
# Need Bison
#
# This is a HACK to get arround a PATH issue with Qt Creator on OSX.
# It seams impossible to pass a custom PATH to Qt Creator on OSX, ie, cannot prepend `/usr/local/bin/` for intance.
# The FIND_PACKAGE fails. For now we provide a fallback with a custom FIND_PROGRAM. The variable BISON_DIR is also available.
IF(WIN32)
  FIND_PACKAGE(BISON 3.0 REQUIRED)
  IF(BISON_FOUND)
    MESSAGE(STATUS "Found bison: ${BISON_EXECUTABLE} / Version: ${BISON_VERSION}" )
  ENDIF()
ELSE()  # Linux, OSX
  # use -DBISON_DIR=/path/ to provide the path to bison
  FIND_PROGRAM( BISON_EXECUTABLE bison
    PATHS /usr/local/bin/ /opt/local/bin/ /usr/bin ${BISON_DIR}
    DOC "bison path"
    NO_DEFAULT_PATH )
  IF(BISON_EXECUTABLE )
    MESSAGE(STATUS "Found bison: " ${BISON_EXECUTABLE})
  ELSE()
    MESSAGE(FATAL_ERROR "Unable to find bison. Try to provide -DBISON_DIR=[path]")
  ENDIF()
ENDIF()



# FILE (GLOB TRANSLATIONS_FILES ${CMAKE_CURRENT_SOURCE_DIR}/translations/*.ts)

# OPTION (UPDATE_TRANSLATIONS "Update source translation ${CMAKE_CURRENT_SOURCE_DIR}/translations/*.ts" OFF)


MESSAGE(STATUS "Qt version for compiling: " ${USE_QT_VERSION})

# IF(NOT ${USE_QT_VERSION} MATCHES "4" AND NOT ${USE_QT_VERSION} MATCHES "5")
#   MESSAGE(FATAL_ERROR "-- Qt version must be set to 4 or 5!")
# ENDIF()



IF(${USE_DEBUGGER})
  SET(CMAKE_BUILD_TYPE Debug)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS_DEBUG} -Wall")
ELSE()
  SET(CMAKE_BUILD_TYPE Release)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS_RELEASE} -Wall")
ENDIF()


IF(${ADDR_SANITIZER})
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address")
ENDIF()


MESSAGE(STATUS "CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS}")

INCLUDE(CheckIncludeFile)
INCLUDE(CheckIncludeFileCXX)
INCLUDE(TestCXXAcceptsFlag)
INCLUDE(CheckCXXCompilerFlag)


SET(TARGET_NAME cnc-qt )
SET(CMAKE_HELPERS_BINARY_DIR "${PROJECT_SOURCE_DIR}/cmake")
SET(CMAKE_HELPERS_SOURCE_DIR "${PROJECT_SOURCE_DIR}/cmake")
LIST(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")

SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")



# INCLUDE(CNCQTOutOfSourceBuild) # Disallow in-source builds
# INCLUDE(FindPkgConfig)

INCLUDE(GenerateDEF) # Convenience macro for linking Win32 DLLs using MSVC
INCLUDE(Dependencies)
#INCLUDE(WordSize) # Detect 32/64 bit platform
#INCLUDE(Compiler) # Detect problematic compilers

# INCLUDE(FindOpenGL)
# FIND_PACKAGE(OpenGL)

# find_package(Qt5Core)
# find_package(Qt5Widgets)
# find_package(Qt5Gui)
# find_package(Qt5OpenGL)

# SET(QtApp_RCCS  "${CMAKE_CURRENT_SOURCE_DIR}/sources/CNC-Qt.qrc")

SET(CURRENT_BUILD_DIR ${CMAKE_CURRENT_BINARY_DIR})

INCLUDE(FindLibUSB-1.0)


SET (QT_USE_QTOPENGL TRUE)


IF(NOT ${LIBUSB_VERSION} LESS "1.0.16")
  MESSAGE(STATUS "LibUSB version ${LIBUSB_VERSION}")
ELSE()
  MESSAGE(FATAL_ERROR "-- LibUSB version ${LIBUSB_VERSION} TOO OLD! Please Install this library newer as 1.0.16")
ENDIF()

# Set the CNC-Qt version
FILE(READ "HISTORY" DESCRIBE_STRING)
STRING(REGEX MATCH "([0-9]+\\.[0-9]+\\.[0-9]+)" CNCQT_VERSION "${DESCRIBE_STRING}" )

MESSAGE(STATUS "Version info: ${CNCQT_VERSION}") 
SET(VERSION ${CNCQT_VERSION})

SET(APP_AUTHOR "Eduard Kalinowski")
SET(APP_EMAIL "eduard_kalinowski@yahoo.de")
SET(APP_NAME "CNC-Qt")

IF(WIN32)
  EXECUTE_PROCESS (
    COMMAND "cmd" " /c date /t"
    OUTPUT_VARIABLE BUILD_DATE
    OUTPUT_STRIP_TRAILING_WHITESPACE)
ELSE()
  EXECUTE_PROCESS (
    COMMAND date +"%d.%m.%Y"
    OUTPUT_VARIABLE BUILD_DATE
    OUTPUT_STRIP_TRAILING_WHITESPACE)
    STRING(REGEX REPLACE "\"" "" BUILD_DATE ${BUILD_DATE})
ENDIF()

MESSAGE(STATUS "Version build date: ${BUILD_DATE}")

# 
SET(CNCQT_PACKAGE cnc-qt)
# SET(CNCQT_VERSION ${CNCQT_MAJOR_VERSION}.${CNCQT_MINOR_VERSION}.${CNCQT_RELEASE_VERSION}.${CNCQT_BUILD_VERSION})
SET(CNCQT_HOST ${CMAKE_SYSTEM} ${CMAKE_SYSTEM_PROCESSOR})
SET(CNCQT_COPYRIGHT "Copyright (c) 2015-2016, Sergey Zheigurov, Copyright (c) 2015-2018 Eduard Kalinowski. All Rights Reserved.")
SET(CNCQT_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})

# Setup high-level build options
# IF(MSVC)
#   SET(CNCQT_ENABLE_SYMBOL_VISIBILITY_DEFAULT ON)
# ELSE(MSVC)
#   SET(CNCQT_ENABLE_SYMBOL_VISIBILITY_DEFAULT OFF)
# ENDIF(MSVC)


# SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -lusb-1.0")



# options for gprof 
IF(${USE_PROFILER})
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pg")
  SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pg")
  SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -pg")
  # after execution of program: gprof ./build/cncqt 
  # and get the information from gprof.txt file
  MESSAGE(STATUS "Compile with profiling information")
ELSE()
  MESSAGE(STATUS "Compile without profiling information")
ENDIF()


IF(${ADDR_SANITIZER})
  SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -lasan")
ENDIF()


IF(${USE_QT_VERSION} MATCHES "4")
    FIND_PACKAGE(Qt4 COMPONENTS QtCore QtGui QtOpenGL REQUIRED)

    IF(NOT QT4_FOUND)
        MESSAGE(FATAL_ERROR "Qt4 could not be found. "
        "If it's INSTALLed in a non-standard location, specify the path to qmake in QT_QMAKE_EXECUTABLE. "
        "You can do it in interactive mode (ccmake instead of cmake) or using -DVAR=VAL syntax.")
    ENDIF()
ELSE()
    FIND_PACKAGE(Qt5 COMPONENTS Core Gui Widgets OpenGL REQUIRED QUIET)

#     FIND_PACKAGE(Qt5 COMPONENTS LinguistTools  REQUIRED QUIET)
    
    IF(NOT Qt5Widgets_FOUND)
        MESSAGE(FATAL_ERROR "Qt5 could not be found. "
        "If it's INSTALLed in a non-standard location, specify the path to qmake in QT_QMAKE_EXECUTABLE. "
        "You can do it in interactive mode (ccmake instead of cmake) or using -DVAR=VAL syntax.")
    ENDIF(NOT Qt5Widgets_FOUND)
ENDIF()

# INCLUDE_DIRECTORIES( ${LIBUSB_INCLUDE_DIRS})

SET( CNCQT_CPACK_PACKAGE_SHLIBDEPS ON )

IF(${USE_QT_VERSION} MATCHES "4")
    INCLUDE_DIRECTORIES(${QT_INCLUDES})
#     MESSAGE(STATUS "Qt4 INCLUDES ${QT_INCLUDES}")
    ADD_DEFINITIONS(-DGL_IMPLEMENTATION_GL)
#     LINK_DIRECTORIES(${QT_LIBRARY_DIR} ${LIBUSB_LIBRARIES})
ELSE()
    INCLUDE_DIRECTORIES(${QT_INCLUDES} ${Qt5OpenGL_INCLUDE_DIRS} ${Qt5Widgets_INCLUDE_DIRS} )
    
#     INCLUDE_DIRECTORIES(${Qt5OpenGL_INCLUDE_DIRS} ${QT_QTOPENGL_INCLUDE_DIR} ${OPENGL_INCLUDE_DIR})
#     INCLUDE_DIRECTORIES(${Qt5OpenGL_INCLUDE_DIRS} ${QT_QTOPENGL_INCLUDE_DIR})
    MESSAGE(STATUS "Qt OpenGL: ${Qt5Gui_OPENGL_IMPLEMENTATION}")
    
    IF (${Qt5Gui_OPENGL_IMPLEMENTATION} STREQUAL GLESv2)
      #SET (QT_OPENGL_ES_2 TRUE)
      ADD_DEFINITIONS(-DGL_IMPLEMENTATION_GLES2)
      MESSAGE(STATUS "Compiling for GLES 2")
    ELSEIF (${Qt5Gui_OPENGL_IMPLEMENTATION} STREQUAL GL)
      ADD_DEFINITIONS(-DGL_IMPLEMENTATION_GL)
      MESSAGE(STATUS "Compiling for OpenGL")
    ELSE()
      MESSAGE(SEND_ERROR "Qt5Gui_OPENGL_IMPLEMENTATION does not contain valid data.")
    ENDIF()

#     MESSAGE(STATUS "Qt5 INCLUDES ${QT_INCLUDES} ${Qt5Widgets_INCLUDE_DIRS} ${Qt5OpenGL_INCLUDE_DIRS}")

    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${Qt5OpenGL_EXECUTABLE_COMPILE_FLAGS} ${Qt5Widgets_EXECUTABLE_COMPILE_FLAGS} ")
ENDIF()


CONFIGURE_FILE (
    "${PROJECT_SOURCE_DIR}/sources/version.h.in"
    "${PROJECT_SOURCE_DIR}/sources/includes/version.h"
    )


SET ( OBJECTS_DIR temp )
SET ( MOC_DIR temp )
SET ( UI_HEADERS_DIR temp )
SET ( UI_SOURCES_DIR temp )


#
# List of lexer/parsers type names
#
SET(ParserTypes
  gcode
  svg
  dxf
  gerber
)

# clear value
SET(GENERATED_SOURCES)
SET(GENERATED_HEADERS)

MESSAGE(STATUS "Generate from ${FLEX_EXECUTABLE} ${BISON_EXECUTABLE}")

MESSAGE(STATUS "Current sources dir ${CMAKE_CURRENT_SOURCE_DIR}")
MESSAGE(STATUS "Sources dir ${CMAKE_SOURCE_DIR}")

FOREACH( type ${ParserTypes} )
  MESSAGE(STATUS "Parser: ${type}" )
  # We need to generate the parsers in separate directories because of 
  # files location.hh position.hh and stack.hh will be cretated without prefix
  FILE(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/parser ${CMAKE_CURRENT_BINARY_DIR}/parser/${type}) 
  
  # Create custom Bison
  SET(BisonOutput ${CMAKE_CURRENT_BINARY_DIR}/parser/${type}/parse_${type}.cpp)

  ADD_CUSTOM_COMMAND(
    OUTPUT ${BisonOutput}
    COMMAND ${BISON_EXECUTABLE}
              --defines=${CMAKE_CURRENT_BINARY_DIR}/parser/${type}/parse_${type}.h
              --output=${BisonOutput}
              --verbose
              ${CMAKE_CURRENT_SOURCE_DIR}/sources/parser/parse_${type}.ypp
    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/sources/parser/parse_${type}.ypp
  )

  # Create custom Flex
  SET(FlexInput ${CMAKE_CURRENT_SOURCE_DIR}/sources/parser/scan_${type}.lpp )
  SET(FlexOutput ${CMAKE_CURRENT_BINARY_DIR}/parser/${type}/scan_${type}.cpp )
  # bison ${FLEX_EXECUTABLE} -Cf for little bit better performance 
  # because of not compability with c++ deactivated
  # --header-file=${CMAKE_CURRENT_BINARY_DIR}/parser/${type}/scan_${type}.h
  # see https://stackoverflow.com/questions/35606354/multiple-parsers-in-flex-bison-include-fails
  ADD_CUSTOM_COMMAND(
    OUTPUT ${FlexOutput}
    COMMAND ${FLEX_EXECUTABLE}
            --outfile=${FlexOutput}
            ${FlexInput}
    DEPENDS ${BisonOutput} ${FlexInput}
  )
    
  INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}/parser/${type})

  SET(GENERATED_HEADERS ${GENERATED_HEADERS} 
                     ${CMAKE_CURRENT_BINARY_DIR}/parser/${type}/parse_${type}.h )
                     
  SET(GENERATED_SOURCES ${GENERATED_SOURCES} ${BisonOutput} ${FlexOutput} )
ENDFOREACH()

FOREACH( gfile ${GENERATED_SOURCES} )
  #MESSAGE(STATUS "Generate file: ${gfile}" )
  SET_SOURCE_FILES_PROPERTIES(${gfile} PROPERTIES GENERATED TRUE)
ENDFOREACH()

MESSAGE(STATUS "Generated source files: ${GENERATED_SOURCES}")

ADD_SUBDIRECTORY(sources/settings)

ADD_SUBDIRECTORY(sources/parser)

ADD_SUBDIRECTORY(sources)

INCLUDE_DIRECTORIES( ${CMAKE_SOURCE_DIR} 
                     ${CMAKE_CURRENT_SOURCE_DIR}/sources/settings/includes
                     ${CMAKE_CURRENT_SOURCE_DIR}/sources/parser/includes 
                     ${CMAKE_CURRENT_SOURCE_DIR}/sources/includes 
                     ${LIBUSB_INCLUDE_DIRS})

MESSAGE(STATUS "LibUSB INCLUDES ${LIBUSB_INCLUDE_DIRS}")

IF(${USE_QT_VERSION} MATCHES "4")
#     QT4_ADD_TRANSLATION(APP_TRANSLATIONS ${TRANSLATION})
    QT4_WRAP_CPP(APP_HEADERS_MOC ${MOC_HEADERS} ${MOC_SETTINGS_HEADERS} )
    QT4_WRAP_UI(APP_FORMS_HEADERS ${MAIN_FORMS} ${SETTINGS_FORMS} )
    QT4_ADD_RESOURCES(APP_RESOURCES_RCC ${APP_RESOURCES})
ELSE()
#     QT5_ADD_TRANSLATION(APP_TRANSLATIONS ${TRANSLATION})
    QT5_WRAP_CPP(APP_HEADERS_MOC ${MOC_HEADERS} ${MOC_SETTINGS_HEADERS} )
    QT5_WRAP_UI(APP_FORMS_HEADERS ${MAIN_FORMS} ${SETTINGS_FORMS} )
    QT5_ADD_RESOURCES(APP_RESOURCES_RCC ${APP_RESOURCES})
ENDIF()


INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_SOURCE_DIR} )

SOURCE_GROUP( "Generated Files" FILES
    ${MOC_FILES_CPP}
    ${SETTINGS_HEADERS}
    ${MAIN_HEADERS}
    ${PARSER_HEADERS} 
    ${GENERATED_HEADERS}
    ${APP_FORMS_HEADERS}
    ${APP_RESOURCES_RCC}
)

# SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -lfl")

# ADD_DEFINITIONS(${QT_DEFINITIONS} -DQT_USE_FAST_CONCATENATION -DQT_USE_FAST_OPERATOR_PLUS)

IF(NOT ${USE_DEBUGGER})
    ADD_DEFINITIONS(${QT_DEFINITIONS} -DQT_NO_DEBUG_OUTPUT -DQT_USE_FAST_CONCATENATION -DQT_USE_FAST_OPERATOR_PLUS)
    
    IF (CMAKE_COMPILER_IS_GNUCC AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.7)
        # was -fno-exceptions -fno-rtti
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
    ELSE()
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
    ENDIF()
ENDIF()

IF(${USE_QT_VERSION} MATCHES "4")
    INCLUDE(${QT_USE_FILE})
    ADD_DEFINITIONS(-DQT_PROJECT -DNO_QT3SUPPORT -DDISABLE_QT3SUPPORT)
ELSE()
    ADD_DEFINITIONS( ${Qt5Widgets_DEFINITIONS} ${Qt5OpenGL_DEFINITIONS} -DQT_PROJECT )
ENDIF()

IF(WIN32)
    ADD_DEFINITIONS(-DUNICODE -D_UNICODE)
ENDIF()

ADD_EXECUTABLE(${CMAKE_PROJECT_NAME}
    ${APP_SOURCES}
    ${SETTINGS_SOURCES}
    ${MAIN_SOURCES}
    ${GENERATED_SOURCES}
    ${PARSER_SOURCES}
    ${APP_HEADERS_MOC} 
    ${APP_FORMS_HEADERS} 
#     ${APP_TRANSLATIONS}
    ${APP_RESOURCES_RCC}
)


IF(${USE_QT_VERSION} MATCHES "4")
#   IF(${USE_OPENGL})
#     TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME} ${QT_LIBRARIES} ${OPENGL_LIBRARIES} ${LIBUSB_LIBRARIES})
  TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME} ${QT_LIBRARIES} ${LIBUSB_LIBRARIES})
#   ELSE()
#     TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME} ${QT_LIBRARIES} ${LIBUSB_LIBRARIES})
#   ENDIF()
ELSE()
#   IF(${USE_OPENGL})
#     TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME} ${Qt5Widgets_LIBRARIES} ${Qt5OpenGL_LIBRARIES} ${OPENGL_LIBRARIES} ${LIBUSB_LIBRARIES})
  TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME} ${QT_LIBRARIES} ${Qt5Widgets_LIBRARIES} ${Qt5OpenGL_LIBRARIES} ${Qt5Core_LIBRARIES} ${LIBUSB_LIBRARIES})
  IF (${Qt5Gui_OPENGL_IMPLEMENTATION} STREQUAL GL)
    TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME} ${QT_LIBRARIES} ${Qt5Widgets_LIBRARIES} ${Qt5Gui_OPENGL_LIBRARIES} ${Qt5Core_LIBRARIES} ${LIBUSB_LIBRARIES})
  ELSE()
    TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME} ${QT_LIBRARIES} ${Qt5Widgets_LIBRARIES} ${Qt5Gui_EGL_LIBRARIES} ${Qt5Gui_OPENGL_LIBRARIES} ${Qt5Core_LIBRARIES} ${LIBUSB_LIBRARIES})
  ENDIF()
   MESSAGE(STATUS "QT LIBRARIES: ${QT_LIBRARIES} ${Qt5Widgets_LIBRARIES} ${Qt5OpenGL_LIBRARIES} ${Qt5Core_LIBRARIES}")
#   ELSE()
#     TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME} ${Qt5Widgets_LIBRARIES} ${LIBUSB_LIBRARIES})
#   ENDIF()
ENDIF()

ADD_CUSTOM_TARGET (tags
    COMMAND  ctags -R -f tags ${CMAKE_SOURCE_DIR}/sources
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
)
# MESSAGE("CMAKE_SOURCE_DIR main ${CMAKE_SOURCE_DIR}")
# MESSAGE("CMAKE_CURRENT_BINARY_DIR main ${CMAKE_CURRENT_BINARY_DIR}")
# INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})


# Setup module enabled/disabled defaults ...
IF(MSVC)
    SET(CNCQT_BUILD_GLX_MODULE_DEFAULT ON)
    SET(CNCQT_BUILD_OSX_MODULE_DEFAULT OFF)
    SET(CNCQT_BUILD_VIRTUAL_OFFSCREEN_MODULE_DEFAULT OFF)
ENDIF(MSVC)

IF(UNIX AND NOT APPLE)
    SET(CNCQT_BUILD_GLX_MODULE_DEFAULT ON)
    SET(CNCQT_BUILD_OSX_MODULE_DEFAULT OFF)
    SET(CNCQT_BUILD_VIRTUAL_OFFSCREEN_MODULE_DEFAULT OFF)
ENDIF(UNIX AND NOT APPLE)

IF(APPLE)
    SET(CNCQT_BUILD_GLX_MODULE_DEFAULT ON)
    SET(CNCQT_BUILD_OSX_MODULE_DEFAULT ON)
    SET(CNCQT_BUILD_VIRTUAL_OFFSCREEN_MODULE_DEFAULT OFF)
ENDIF(APPLE)


OPTION(CNCQT_ENABLE_SYMBOL_VISIBILITY "Minimize the number of symbols exported from shared libraries." ${CNCQT_ENABLE_SYMBOL_VISIBILITY_DEFAULT})
MARK_AS_ADVANCED(CNCQT_ENABLE_SYMBOL_VISIBILITY)

# OPTION(CNCQT_ENABLE_TESTING "Build the CNC-Qt regression test suite." OFF)
# SET(BUILD_TESTING ${CNCQT_ENABLE_TESTING} CACHE INTERNAL "" FORCE)
# INCLUDE(CTest)
# MARK_AS_ADVANCED(DART_TESTING_TIMEOUT)
# IF(CNCQT_ENABLE_TESTING)
#     CMAKE_MINIMUM_REQUIRED(VERSION 2.6.1 FATAL_ERROR)
#     CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/CTestCustom.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/CTestCustom.cmake @ONLY)
# ENDIF(CNCQT_ENABLE_TESTING)

# Capture system configuration
INCLUDE(SystemConfiguration)

# MSVC configuration
IF(WIN32)
    IF(NOT MSVC)
        SET(CMAKE_EXE_LINKER_FLAGS "-Wl,--enable-runtime-pseudo-reloc -opengl=dynamic" CACHE STRING "" FORCE)
        SET(CMAKE_SHARED_LINKER_FLAGS "-Wl,--enable-runtime-pseudo-reloc -Wl,--export-all-symbols -opengl=dynamic" CACHE STRING "" FORCE)
    ENDIF(NOT MSVC)
ENDIF(WIN32)

# Setup output directories ...
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CNCQT_BINARY_DIR}/bin)

# SET(CNCQT_LIBDIR lib) # Allows us to handle 64-bit libs if/when it becomes necessary.

IF(MSVC)
    SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CNCQT_BINARY_DIR}/bin)
ELSE(MSVC)
    SET(CNCQT_LIBDIR lib)
    SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CNCQT_BINARY_DIR}/${CNCQT_LIBDIR})
ENDIF(MSVC)

# Setup a macro for compiling resources ...
MACRO(CNCQT_COMPILE_RESOURCE OUTPUT INPUT RESOURCE_PATH)

    SET(INPUT_FILE "${CMAKE_CURRENT_SOURCE_DIR}/${INPUT}")
    SET(OUTPUT_FILE "${CMAKE_CURRENT_BINARY_DIR}/${INPUT}.cpp")
    GET_FILENAME_COMPONENT(OUTPUT_PATH ${OUTPUT_FILE} PATH)

    GET_TARGET_PROPERTY(CNCQT_RESOURCE_COMPILER cncqt-resource-compiler LOCATION)

    ADD_CUSTOM_COMMAND(
        DEPENDS cncqt-resource-compiler
        DEPENDS ${INPUT_FILE}
        COMMAND ${CMAKE_COMMAND} -E make_directory ${OUTPUT_PATH}
        COMMAND ${CNCQT_RESOURCE_COMPILER} --input ${INPUT_FILE} --path \"<path>${RESOURCE_PATH}</path>\" --output ${OUTPUT_FILE}
        OUTPUT ${OUTPUT_FILE}
        COMMENT "Compiling resource ${INPUT_FILE}"
        )

    LIST(APPEND ${OUTPUT} ${OUTPUT_FILE})

ENDMACRO(CNCQT_COMPILE_RESOURCE)

# Setup subdirectories ...
CNCQT_CONDITIONAL_BUILD(MSVC gendef)

OPTION(CNCQT_ENABLE_DISTRIBUTION "Enable distribution targets." ON)
CNCQT_CONDITIONAL_BUILD(CNCQT_ENABLE_DISTRIBUTION distribution)

# Hide some cruft ...
MARK_AS_ADVANCED(CMAKE_BACKWARDS_COMPATIBILITY)
MARK_AS_ADVANCED(CMAKE_EXECUTABLE_FORMAT)
MARK_AS_ADVANCED(CMAKE_LIBRARY_OUTPUT_DIRECTORY)
MARK_AS_ADVANCED(CMAKE_OSX_ARCHITECTURES)
MARK_AS_ADVANCED(CMAKE_OSX_DEPLOYMENT_TARGET)
MARK_AS_ADVANCED(CMAKE_OSX_SYSROOT)
MARK_AS_ADVANCED(CMAKE_RUNTIME_OUTPUT_DIRECTORY)
MARK_AS_ADVANCED(CMAKE_USE_CHRPATH)

