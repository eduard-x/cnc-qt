/****************************************************************************
 * C# to Qt portation, Linux developing                                     *
 * flex/bison Gerber parser                                                 *
 * Copyright (C) 2015-2018 by Eduard Kalinowski                             *
 * Germany, Lower Saxony, Hanover                                           *
 * eduard_kalinowski@yahoo.de                                               *
 *                                                                          *
 * C# project CNC-controller-for-mk1                                        *
 * https://github.com/selenur/CNC-controller-for-mk1                        *
 *                                                                          *
 * The Qt project                                                           *
 * https://github.com/eduard-x/cnc-qt                                       *
 *                                                                          *
 * CNC-Qt is free software; may be distributed and/or modified under the    *
 * terms of the GNU General Public License version 3 as published by the    *
 * Free Software Foundation and appearing in the file LICENSE_GPLv3         *
 * included in the packaging of this file.                                  *
 *                                                                          *
 * This program is distributed in the hope that it will be useful,          *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of           *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            *
 * GNU General Public License for more details.                             *
 *                                                                          *
 * You should have received a copy of the GNU Lesser General Public         *
 * License along with CNC-Qt. If not, see  http://www.gnu.org/licenses      *
 ****************************************************************************/

%{

extern int gerberlineno;

%}

/* C++ parser interface */
%skeleton "lalr1.cc"
%require  "3.0"

// The parsing context.
%parse-param { gerber::driver& checker }
%lex-param   { gerber::driver& checker }

%locations

%initial-action
{
    // Initialize the initial location.
    @$.begin.filename = @$.end.filename = &checker.file;
};

/* increase usefulness of error messages */
%define parse.error verbose
%define api.namespace {gerber}
/* assert correct cleanup of semantic value objects */
%define parse.assert

%define api.value.type variant
%define api.token.prefix {T_}



%token                  END     0   "end of file"

%token NEW_LINE
%token ABS REL SET_INCH SET_MM
%token NEGATIVE POSITIVE
%token MIRRORING

%token InvalidCharacter


%token <int> X_PAR Y_PAR I_PAR J_PAR
%token <float> A_PAR B_PAR
%token <int> INTEGER D_OPCODE G_OPCODE
%token <float> FLOAT APARAM BPARAM 
%token <std::string> FMT
%token <std::string> APER_MACRO_NAME APER_DICTIONARY APER_SELECT



%code requires {
    #include <QString>
    #include <QChar>
    #include <QDebug>
    #include <QVector>
    
    #include <stdexcept>
    #include <string>

    #include "location.hh"

    namespace gerber {
        class scanner;
        class driver;
    };
}

%code {
    #include <iostream>     // cerr, endl
    #include <utility>      // move
    #include <string>

    #include "Settings.h"
    #include "GerberScanner.h"

    // init of first gerber data
    GerberData *gerber_data = new GerberData();
}

%start parse_gerber

%%

parse_gerber: 
        | glines
        ;


glines: gline 
        | gline glines
        ;


gline:  X_PAR
        {
            qInfo() << "x" << $1;
        }
        | Y_PAR
        {
            qInfo() << "y" << $1;
        }
        | SET_MM
        {
        }
        | A_PAR 
        {
        }
        | MIRRORING
        {
        }
        | B_PAR  
        {
        }
        | POSITIVE
        {
        }
        | NEGATIVE
        {
        }
        | INTEGER
        {
        }
        | FLOAT 
        {
        }
        | D_OPCODE
        {
        }
        | G_OPCODE
        {
        }
        | APER_MACRO_NAME
        {
        }
        | APER_DICTIONARY
        {
        }
        | APER_SELECT
        {
        }
        | SET_INCH
        {
        }
        | FMT
        {
            if ($1[0] == 'L') {
                /* OMIT_LEADING_ZEROS */
            }
            if ($1[0] == 'T') {
                /* OMIT_TRAILING_ZEROS */
            }
            if ($1[1] == 'A') {
                /* ABSOLUTE_NOTATION */
            }
            if ($1[1] == 'I') {
                /* INCREMENTAL_NOTATION */
            }
        }
        | I_PAR
        {
            qInfo() << "i" << $1;
        }
        | J_PAR
        {
            qInfo() << "j" << $1;
        }
        | NEW_LINE
        {
            checker.gerberVector << *gerber_data;
        }
        ;

%%

void gerber::parser::error ( const gerber::parser::location_type& l, const std::string& m)
{
    checker.error (l, m);
}
